
//1. Max heap using INSERT.

#include<iostream.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
class heap
{
private:
int a[1000],n;
public:
void getdata();
void insert();
void disp();
};
void heap::getdata()
{
cout<<"\n...Program for Max Heap Insert...\n\n";
cout<<"Enter the Size := " ;
cin>>n;
for(int i=1;i<=n;i++)
{
a[i]=random(20000);
}
}
void heap::insert()
{
for(int j=1;j<=n;j++)
{
int i=j;
int item=a[i];
while((i>1) && (a[i/2]<item))
{
a[i]=a[i/2];
i=i/2;
}
a[i]=item;
}
}
void heap::disp()
{
for(int i=1;i<=n;i++)
{
if(i%8==0)
cout<<"\n";
cout<<a[i]<<"\t";
}
}
void main()
{
clrscr();
clock_t e,s;
heap h;
h.getdata();
cout<<"\n\n Befor Insert :: ";
h.disp();
s=clock();
h.insert();
e=clock();
cout<<"\n\n After Insert ::\n";
h.disp();
cout<<"\n\nThe Time Complexity is ::"<<((e-s)/CLK_TCK);
getch();
}




//2.  Min. heap using INSERT.

#include<iostream.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
class heap
{
private:
int a[1000],n;
public:
void getdata();
void insert();
void disp();
};
void heap::getdata()
{
cout<<"\n...Program for Min Heap Insert...\n\n";
cout<<"Enter the Size := " ;
cin>>n;
for(int i=1;i<=n;i++)
{
a[i]=random(20000);
}
}
void heap::insert()
{
for(int j=1;j<=n;j++)
{
int i=j;
int item=a[i];
while((i>1) && (a[i/2] > item))
{
a[i]=a[i/2];
i=i/2;
}
a[i]=item;
}
}
void heap::disp()
{
for(int i=1;i<=n;i++)
{
if(i%8==0)
cout<<"\n";
cout<<a[i]<<"\t";
}
}
void main()
{
clrscr();
clock_t e,s;
heap h;
h.getdata();
cout<<"\n\n Befor Insert :: ";
h.disp();
s=clock();
h.insert();
e=clock();
cout<<"\n\n After Insert ::\n";
h.disp();
cout<<"\n\nThe Time Complexity is ::"<<((e-s)/CLK_TCK);
getch();
}






//3.	 Max heap using ADJUST/HEAPIFY

#include<iostream.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
int a[1000],n;
class heap
{
int i,j,item;
public:
void get();
void show();
void adjust(int [],int i,int j);
void heapify(int [],int);
};
void heap::get()
{
cout<<"Program for Max Heap using Heapify/Adjust..." ;
cout<<"\n\nEnter the size of array :";
cin>>n;
for(i=1;i<=n;i++)
a[i]=random(1000);
}
void heap::show()
{
cout<<"\n The element is:= \n";
for(i=1;i<=n;i++)
cout<<a[i]<<"\t";
}
void heap::adjust(int a[],int i,int n)
{
j=2*i;
item=a[i];
while(j<=n)
{
if((j<n) && (a[j]<a[j+1]))
j++;
if(item>=a[j])
break;
a[j/2]=a[j];
j=2*j;
}
a[j/2]=item;
}
void heap::heapify(int a[],int n)
{
	for(i=n/2;i>=1;i--)
	adjust(a,i,n);
}
void main()
{
clrscr();
clock_t e,s;
heap h;
h.get();
h.show();
s=clock();
h.heapify(a,n);
e=clock();
h.show();
cout<<"\n The Time complexityis => "<<(e-s)/CLK_TCK;
getch();
}





//4.	 Min heap using ADJUST/HEAPIFY

#include<iostream.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
int a[1000],n;
class heap
{
int i,j,item;
public:
void get();
void show();
void adjust(int [],int i,int j);
void heapify(int [],int);
};
void heap::get()
{
cout<<"Program for Min Heap using Heapify/Adjust..." ;
cout<<"\n\nEnter the size of array :";
cin>>n;
for(i=1;i<=n;i++)
a[i]=random(1000);
}
void heap::show()
{
cout<<"\n The element is:= \n";
for(i=1;i<=n;i++)
cout<<a[i]<<"\t";
}
void heap::adjust(int a[],int i,int n)
{
j=2*i;
item=a[i];
while(j<=n)
{
if((j<n) && (a[j]>a[j+1]))
j++;
if(item<=a[j])
break;
a[j/2]=a[j];
j=2*j;
}
a[j/2]=item;
}
void heap::heapify(int a[],int n)
{
for(i=n/2;i>=1;i--)
adjust(a,i,n);
}
void main()
{
clrscr();
clock_t e,s;
heap h;
h.get();
h.show();
s=clock();
h.heapify(a,n);
e=clock();
h.show();
cout<<"\n The Time complexityis => "<<(e-s)/CLK_TCK;
getch();
}




//7.	ascending order Heap Sort.

#include<iostream.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
int b[5000];
class heap
{
public:
void heapsort(int a[],int n);
void heapify(int a[],int n);
void adjust(int a[],int i, int n);
};
void heap::heapsort(int a[],int n)
{
heapify(a,n);
for(int i=n;i>=2;i--)
{
int t=a[i];
a[i]=a[1];
a[1]=t;
adjust(a,1,i-1);
}
}
void heap::heapify(int a[],int n)
{
int i;
for(i=n/2;i>=1;i--)
{
adjust(a,i,n);
}
}
void heap::adjust(int a[],int i,int n)
{
int j=2*i;
int item=a[i];
while(j<=n)
{
if((j<n) && (a[j]<a[j+1]))
j=j+1;
if(item>=a[j])
break;
else
{
a[j/2]=a[j];
j=2*j;
}
}
a[j/2]=item;
}
void main()
{
clrscr();
clock_t e,s;
int n,i;
heap h;
cout<<"..Program For HeapSort Ascending using Adjust/Heapify..\n\n";
cout<<"\n Enter Size Of The Array :->";
cin>>n;
for(i=1;i<=n;i++)
{
if(i%8==0)
cout<<"\n";
b[i]=random(n);
cout<<"\t"<<b[i];
}
s=clock();
h.heapsort(b,n);
e=clock();
cout<<"\n After Heap Sorting : \n";
for(i=1;i<=n;i++)
{
if(i%8==0)
cout<<"\n";
cout<<"\t"<<b[i];
}
cout<<"\n\n The Time Complexity Is :="<<((e-s)/CLK_TCK);
getch(); }




				
//8.	 descending order Heap Sort.

#include<iostream.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
int b[5000];
class heap
{
public:
void heapsort(int a[],int n);
void heapify(int a[],int n);
void adjust(int a[],int i, int n);
};
void heap::heapsort(int a[],int n)
{
heapify(a,n);
for(int i=n;i>=2;i--)
{
int t=a[i];
a[i]=a[1];
a[1]=t;
adjust(a,1,i-1);
}
}
void heap::heapify(int a[],int n)
{
int i;
for(i=n/2;i>=1;i--)
{
adjust(a,i,n);
}
}
void heap::adjust(int a[],int i,int n)
{
int j=2*i;
int item=a[i];
while(j<=n)
{
if((j<n) && (a[j]>a[j+1]))
j=j+1;
if(item<=a[j])
break;
else
{
a[j/2]=a[j];
j=2*j;
}
}
a[j/2]=item;
}
void main()
{ clrscr();
clock_t e,s;
int n,i;
heap h;
cout<<"..Program For HeapSort Descending using Adjust/Heapify..\n\n";
cout<<"\n Enter Size Of The Array :->";
cin>>n;
for(i=1;i<=n;i++)
{
if(i%8==0)
cout<<"\n";
b[i]=random(n);
cout<<"\t"<<b[i];
}
s=clock();
h.heapsort(b,n);
e=clock();
cout<<"\n After Heap Sorting : \n";
for(i=1;i<=n;i++)
{
if(i%8==0)
cout<<"\n";
cout<<"\t"<<b[i];
}
cout<<"\n\n The Time Complexity Is :="<<((e-s)/CLK_TCK);
getch();
}




//11.	 searching element binary search 

#include<iostream.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
int a[1000];
class binary
{
int n,l,h,mid,x;
public:
void get();
void put();
int bsearch(int x);
void sort();
};
void binary::get()
{
cout<<"\n Enter the number of elements :" ;
cin>>n;
for(int i=1;i<=n;i++)
a[i]=random(20000);
}
void binary::put()
{
for(int i=1;i<=n;i++)
{
if(i%8==0)
cout<<endl;
cout<<a[i]<<'\t';
}
}
int binary::bsearch(int x)
{
l=1;
h=n;
while(l<=h)
{
mid=(l+h)/2;
if(x<a[mid])
h=mid-1;
else if(x>a[mid])
l=mid+1;
else
{
return mid;
}
}
return 0;
}
void binary::sort()
{
for(int j=1;j<=n;j++)
for(int i=j;i<=n;i++)
{
if(a[i]<a[j])
{
int temp=a[i];
a[i]=a[j];
a[j]=temp;
}
}
}
void main()
{
clrscr();
cout<<"\n*** Program for Binary Search ***\n";
int x,y,i,yes,no;
clock_t e,s;
binary b;
b.get();
b.sort();
cout<<"\n Sorted elements are :"<<endl;
b.put();
cout<<"\n Enter elements You want to find :"<<endl;
cin>>x;
s=clock();
y=b.bsearch(x);
cout<<"find at Position : "<<y<<endl;
b.put();
e=clock();
cout<<"\n Time Complexity is :- "<<((e-s)/CLK_TCK);
getch();
}



				
//12.	minimum and maximum using MAXMIN.

	    
#include<iostream.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
int max,min,n;
class sai
{
int a[100];
public:
int j,i;
void get();
void put();
void maxmin(int,int,int &,int &);
void show();
};
void sai::get()
{
cout<<"\n Enter the Size of array :- ";
cin>>n;
for(i=1;i<=n;i++)
{
a[i]=random(1000);
}
}
void sai::put()
{
cout<<"\n show The Element of array :- \n";
for(i=1;i<=n;i++)
{
if(i%8==0)
cout<<"\n";
cout<<a[i]<<"\t";
}
}
void sai::maxmin(int i,int j,int &max,int &min)
{
int mid,max1,min1,max2,min2;
if(i==j)
{
max=min=a[i];
}
else if(i==j-1)
{
// cout<<a[i]<<" "<<a[j];
if(a[i]<a[j])
{
max=a[j];
min=a[i];
}
else
{
max=a[i];
min=a[j];
}
}
else
{
mid=(i+j)/2;
maxmin(i,mid,max1,min1);
maxmin(mid+1,j,max2,min2);
max=max1>max2?max1:max2;
min=min1<min2?min1:min2;
}
}
void sai::show()
{
cout<<"\n The maximum element is :- "<<max;
cout<<"\n The Minimum element is :- "<<min;
}
void main()
{
clrscr();
cout<<"\n\t*** Program for to find maximum and minimum from a given array using maxmin ***\n\t";
sai s;
clock_t e,l;
s.get();
s.put();
e=clock();
s.maxmin(1,n,max,min);
l=clock();
s.show();
cout<<"\n The Time Complexity is :- "<<(l-e)/CLK_TCK;
getch();
}




//13.	 ascending order Merge Sort.

#include<iostream.h>
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
int n;
class Merge
{
int a[1000],i,j;
public:
void read();
void merge_sort(int l,int h);
void merge1(int l,int m,int h);
void disp();
};
void Merge::read()
{
for(i=0;i<n;i++)
{
a[i]=random(20000);
}
}
void Merge::merge_sort(int l,int h)
{
int m1;
if(l<h)
{
m1=int((l+h)/2);
merge_sort(l,m1);
merge_sort(m1+1,h);
merge1(l,m1,h);
}
}
void Merge::merge1(int l,int m,int h)
{
int h1=l,b[1800];
int i=l;
j=m+1;
while((h1<=m)&&(j<=h))
{
if(a[h1]<=a[j])
{
b[i]=a[h1];
i++;
h1++;
}
else
{
b[i]=a[j];
i++;
j++;
}
}
if(h1<=m)
{
while(h1<=m)
{
b[i]=a[h1];
i++;
h1++;
}
}
else
{
while(j<=h)
{
b[i]=a[j];
i++;
j++;
}
}
for(int k=l;k<=h;k++)
a[k]=b[k];
}
void Merge::disp()
{
for(i=0;i<n;i++)
{
cout<<a[i]<<"\t";
if((i+1)%9==0)
cout<<endl;
}
}
void main()
{
clrscr();
randomize();
clock_t s,e;
int l,h;
Merge m;
cout<<"Program for Ascending Merge Sort ...\n\n";
cout<<"Enter the Element:";
cin>>n;
h=n-1;
l=0;
m.read();
cout<<"\n\nDisplay the ArrayElement=\n\n";
m.disp();
s=clock();
m.merge_sort(l,h);
e=clock();
cout<<"\nAfter Sorting=\n";
m.disp();
cout<<"\nTime Complexity is:= "<<((e-s)/CLK_TCK);
getch();
}




//14.	 descending order Merge Sort.			

#include<iostream.h>
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
int n;
class Merge
{
int a[1000],i,j;
public:
void read();
void merge_sort(int l,int h);
void merge1(int l,int m,int h);
void disp();
};
void Merge::read()
{
for(i=0;i<n;i++)
{
a[i]=random(20000);
}
}
void Merge::merge_sort(int l,int h)
{
int m1;
if(l<h)
{
m1=int((l+h)/2);
merge_sort(l,m1);
merge_sort(m1+1,h);
merge1(l,m1,h);
}
}
void Merge::merge1(int l,int m,int h)
{
int h1=l,b[1800];
int i=l;
j=m+1;
while((h1<=m)&&(j<=h))
{
if(a[h1]>=a[j])
{
b[i]=a[h1];
i++;
h1++;
}
else
{
b[i]=a[j];
i++;
j++;
}
}
if(h1<=m)
{
while(h1<=m)
{
b[i]=a[h1];
i++;
h1++;
}
}
else
{
while(j<=h)
{
b[i]=a[j];
i++;
j++;
}
}
for(int k=l;k<=h;k++)
a[k]=b[k];
}
void Merge::disp()
{
for(i=0;i<n;i++)
{
cout<<a[i]<<"\t";
if((i+1)%9==0)
cout<<endl;
}
}
void main()
{
clrscr();
randomize();
clock_t s,e;
int l,h;
Merge m;
cout<<"Program For Descending Merge Sort ....\n\n";
cout<<"Enter the Element:";
cin>>n;
h=n-1;
l=0;
m.read();
cout<<"\n\nDisplay the ArrayElement=\n\n";
m.disp();
s=clock();
m.merge_sort(l,h);
e=clock();
cout<<"\nAfter Sorting=\n";
m.disp();
cout<<"\nTime Com.= "<<((e-s)/CLK_TCK);
getch();
}


			

//15.	ascending order Quick Sort.	 			

#include<iostream.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
int n,a[1000];
class q_sort
{
public:
void get();
void put();
void quick_sort(int,int);
int partition(int,int);
};
void q_sort::get()
{
cout<<"\n Enter the Size Of Array := ";
cin>>n;
for(int i=1;i<=n;i++)
{
a[i]=random(2000);
}
}
void q_sort::put()
{
for(int i=1;i<=n;i++)
{
if(i%8==0)
cout<<"\n";
cout<<a[i]<<"\t";
}
}
void q_sort::quick_sort(int p,int q)
{
int j;
if(p<q)
{
j=partition(p,q);
quick_sort(p,j-1);
quick_sort(j+1,q);
}
}
int q_sort::partition(int m,int p)
{
int v=a[m];
int i=m+1;
int j=p;
while(i<=j)
{
while(a[i]<=v)
i=i+1;
while(a[j]>=v)
j=j-1;
if(i<j)
{
p=a[i];
a[i]=a[j];
a[j]=p;
}
}
a[m]=a[j];
a[j]=v;
return j;
}
void main()
{
clrscr();
clock_t e,s;
q_sort q;
cout<<"\n.... Program For Ascending Quick Sort ......\n\n";
q.get();
cout<<"\n Display the element of array before sort :=\n\n";
q.put();
s=clock();
q.quick_sort(1,n);
e=clock();
cout<<"\n Display the element of array before sort :=\n";
q.put();
cout<<"\n The time Complexity :="<<(e-s)/CLK_TCK;
getch();
}




	
//16.	 descending order Quick Sort. 

#include<iostream.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
int n,a[1000];
class q_sort
{
public:
void get();
void put();
void quick_sort(int,int);
int partition(int,int);
};
void q_sort::get()
{
cout<<"\n Enter the Size Of Array := ";
cin>>n;
for(int i=1;i<=n;i++)
{
a[i]=random(2000);
}
}
void q_sort::put()
{
for(int i=1;i<=n;i++)
{
if(i%8==0)
cout<<"\n";
cout<<a[i]<<"\t";
}
}
void q_sort::quick_sort(int p,int q)
{
int j;
if(p<q)
{
j=partition(p,q);
quick_sort(p,j-1);
quick_sort(j+1,q);
}
}
int q_sort::partition(int m,int p)
{
int v=a[m];
int i=m+1;
int j=p;
while(i<=j)
{
while(a[i]>=v)
i=i+1;
while(a[j]<=v)
j=j-1;
if(i<j)
{
p=a[i];
a[i]=a[j];
a[j]=p;
}
}
a[m]=a[j];
a[j]=v;
return j;
}
void main()
{
clrscr();
clock_t e,s;
q_sort q;
cout<<"\n.... Program For Descending Quick Sort ......\n\n";
q.get();
cout<<"\n Display the element of array before sort :=\n\n";
q.put();
s=clock();
q.quick_sort(1,n);
e=clock();
cout<<"\n Display the element of array before sort :=\n";
q.put();
cout<<"\n The time Complexity :="<<(e-s)/CLK_TCK;
getch();
}



						
//17.	  Strassen’s Matrix Multiplication.

#include<iostream.h>
#include<conio.h>
#include<time.h>
class mmu1
{
int a[3][3],b[3][3],c[3][3],p,q,r,s,t,u,v,i,j;
public:
void get();
void put();
void formula();
};
void mmu1::get()
{
cout<<"\nEnter the matrix 1 :- ";
for(i=1;i<=2;i++)
for(j=1;j<=2;j++)
cin>>a[i][j];
cout<<"\nEnter the matrix 2 :- ";
for(i=1;i<=2;i++)
for(j=1;j<=2;j++)
cin>>b[i][j];
}
void mmu1::formula()
{
p=((a[1][1]+a[2][2])*(b[1][1]+b[2][2]));
q=((a[2][1]+a[2][2])*(b[1][1]));
r=((a[1][1])*(b[1][2]-b[2][2]));
s=((a[2][2])*(b[2][1]-b[1][1]));
t=((a[1][1]+a[1][2])*(b[2][2]));
u=((a[2][1]-a[1][1])*(b[1][1]+b[1][2]));
v=((a[1][2]-a[2][2])*(b[2][1]+b[2][2]));
c[1][1]=p+s - t+v;
c[1][2]=r+t;
c[2][1]=q+s;
c[2][2]=p+r - q+u;
}
void mmu1::put()
{
for(int i=1;i<=2;i++)
{
for(int j=1;j<=2;j++)
cout<<c[i][j]<<" ";
cout<<"\n";
}
}
void main()
{
clrscr();
cout<<"\n\t*** Program for Stranssen's Matrix Multiplication ***\n\t";
mmu1 m;
clock_t e,s;
m.get();
s=clock();
m.formula();
cout<<"\nOutput :- "<<endl;
m.put();
e=clock();
cout<<"\n Time complexity :- "<<((e-s)/CLK_TCK);
getch();
}


	
//18.	 Fractional Knapsack instance.

#include<iostream.h>
#include<conio.h>
#include<time.h>
int m,n;
class knapsack
{
float p[20],w[20],x[20],i,j,sum;
public:
void get();
void order();
void knap(int,int);
void show();
};
void knapsack::get()
{
cout<<"\nEnter the element size & sack size :- \n";
cin>>n>>m;
cout<<"\nEnter the profit :- \n";
for(i=1;i<=n;i++)
cin>>p[i];
cout<<"\nEnter the weight :- \n";
for(i=1;i<=n;i++)
cin>>w[i];
}
void knapsack::order()
{
for(i=1;i<=n;i++)
for(j=1;j<n;j++)
{
if((p[j]/w[j])<=(p[j+1]/w[j+1]))
{
int temp=p[j];
p[j]=p[j+1];
p[j+1]=temp;
temp=w[j];
w[j]=w[j+1];
w[j+1]=temp;
}
}
}
void knapsack::knap(int m,int n)
{
int u;
sum=0.0;
for(i=1;i<=n;i++)
x[i]=0.0;
u=m;
for(i=1;i<=n;i++)
{
if(w[i]>u)
break;
x[i]=1.0;
u=u-w[i];
}
if(i<=n)
x[i]=u/w[i];
for(i=1;i<=n;i++)
sum=sum+(p[i]*x[i]);
}
void knapsack::show()
{
for(i=1;i<=n;i++)
cout<<x[i]<<" ";
cout<<"\n---------------------\n";
cout<<"Profit :- "<<sum<<"\n";
cout<<"\n---------------------\n";
}
void main()
{
clrscr();
cout<<"\n\t*** Program for Knapsack Solution ***\n\t";
knapsack k;
k.get();
k.order();
k.knap(m,n);
k.show();
getch();
}



//21.	 single source shortest path.				

#include<iostream.h>
#include<conio.h>
int n;
class single
{
int v,cost[10][10],i,j,s[10];
float dist[10];
public:
void get();
void sisource();
void display();
};
void single::get()
{
cout<<"\nEnter the no. of vertices :- \n";
cin>>n;
cout<<"\nEnter the adjency matrix :- \n";
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
{
cin>>cost [i][j];
if(cost [i][j]==-1)
cost [i][j]=9999;
}
}
void single::sisource()
{
v=1;
for(i=1;i<=n;i++)
{
s[i]=0;
dist[i] = cost [v][i];
}
s[v]=1;
dist[v]=0.0;
int minu,u;
for(int num=2;num<=n;num++)
{
for(i=1;i<=n;i++)
if(s[i]==0)
minu=dist[i];
for(i=1;i<=n;i++)
{
if(s[i]==0 && dist[i]<minu)
{
minu=dist[i];
u=i;
}
}
s[u]=1;
for(i=1;i<=n;i++)
{
if(cost [u][i]>0 && cost [u][i] < 9999 && s[i]==0) {
if(dist[i] > (dist [u] + cost[u][i]))
{
dist [i]= dist [u] + cost [u][i];
}
}
}
}
}
void single::display()
{
cout<<endl;
for(i=1;i<=n;i++)
{
cout<<"distance from 1------------>"<<i<<"\t";
cout<<dist[i]<<" ";
cout<<endl;
}
}
void main()
{
clrscr();
single g;
g.get();
g.sisource();
g.display();
getch();
}


			     		    
//25.	 shortest path using all pair path.

#include<iostream.h>
#include<conio.h>
class all
{
int s[10][10],a[10][10],i,j,k,n,m;
public:
void get();
int min(int,int);
void find();
void display();
};
int all::min(int m,int n)
{
return(m<n ?m:n);
}
void all::get()
{
cout<<"\n Enter the size of element :- \n";
cin>>n;
cout<<"\nEnter the element in array :- \n";
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
{
cin>>a[i][j];
if(a[i][j]==-1)
{
s[i][j]=9999;
}
else
{
s[i][j]=a[i][j];
}
}
}
}
void all::find()
{
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
for(k=1;k<=n;k++)
{
if(i==j)
{
s[i][j]=0;
}
else
s[i][j]=min(s[i][j],s[i][k]+s[k][j]);
if(s[i][j]>=9999)
s[i][j]=0;
}
}
void all::display()
{
cout<<"\n display the element after perform operation find :- \n";
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
{
cout<<s[i][j]<<"\t";
}
cout<<endl;
}
}
void main()
{
clrscr();
all a;
a.get();
a.find();
a.display();
getch();
}


	    	     
		    
//26.	 Traverse Graph using Breadth First Search

#include<iostream.h>
#include<conio.h>
class bfstree
{
int reach[20],a[20][20],q[20],n,i,j,f,r,index;
public:
bfstree()
{
f=r=0;
index=1;
}
void get();
void bfs(int);
};
void bfstree::get()
{
cout<<"\nEnter number of vertices :- ";
cin>>n;
cout<<"\nEnter Adjacency matrix :- ";
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
{
reach[i]=0;
cin>>a[i][j];
}
for(i=1;i<=n;i++)
if(reach[i]==0)
bfs(i);
}
void bfstree::bfs(int index)
{ f=r=0;
reach[index]=1;
f++;
r++;
q[r]=index;
while(f<=r)
{
index=q[f];
f++;
cout<<index<<"\t";
for(j=1;j<=n;j++)
{
if(a[index][j]==1 && reach[j]!=1)
{
reach[j]=1;
r++;
q[r]=j;
}
}
}
}
void main()
{
clrscr();
bfstree b;
b.get();
getch();
}




//27.	 Traverse Graph using Depth First Search

#include<iostream.h>
#include<conio.h>
class dfstree
{
int a[20][20], visited[20],n,i,j;
public:
void dfs(int);
void get();
};
void dfstree::get()
{
cout<<"\nEnter the number of node :- ";
cin>>n;
for(i=1;i<=n;i++)
visited[i]=0;
cout<<"\nEnter the adjancy matrix :- ";
for(i=1;i<=n;i++)
{ for(j=1;j<=n;j++)
cin>>a[i][j];
}
for(i=1;i<=n;i++)
if(visited[i]==0)
dfs(i);
}
void dfstree::dfs(int v)
{
int k;
visited[v]=1;
cout<<"\t"<<v;
for(k=1;k<=n;k++)
if(a[v][k]==1)
if(visited[k]==0)
dfs(k);
}
void main()
{ clrscr();
dfstree d;
d.get();
getch();
}


		   

//28.	 all solutions for N-Queen problem using backtracking.
	    
#include<iostream.h>
#include<conio.h>
#include<math.h>
int x[100],n;
class nqueen
{
int z;
public:
void get();
void show();
void queen(int,int);
int place(int,int);
};
void nqueen::get()
{
cout<<"Enter the no of queens :- \n";
cin>>n;
for(int i=1;i<=n;i++)
x[i]=0;
z=0;
queen(1,n);
}
void nqueen::queen(int k,int n)
{
for(int i=1;i<=n;i++)
{
if(place(k,i))
{
x[k]=i;
if(k==n)
{
cout<<endl;z++; cout<<z<<":->";
for( i=1;i<=n;i++)
cout<<x[i]<<"\t";
}
else
queen(k+1,n);
}
}
}
int nqueen::place(int k,int i)
{
for(int j=1;j<=k-1;j++)
{
if((x[j]==i) || abs(x[j]-i)==(abs(j-k)))
return 0;
}
return 1;
}
void main()
{
clrscr();
nqueen n;
n.get();
getch();
}





	      



